{
  "ruleChain": {
    "additionalInfo": {
      "description": "For detecting outlier water temperatures"
    },
    "name": "Send Alert to Telegram",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 0,
    "nodes": [
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 59,
          "layoutY": 254
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "Get Telegram Keys",
        "debugMode": false,
        "configuration": {
          "tellFailureIfAbsent": true,
          "clientAttributeNames": [],
          "sharedAttributeNames": [],
          "serverAttributeNames": [
            "telegramBotToken",
            "telegramChatID"
          ],
          "latestTsKeyNames": [],
          "getLatestValueWithTs": false
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 348,
          "layoutY": 255
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "New Telegram Message",
        "debugMode": true,
        "configuration": {
          "jsScript": " var newMsg = {};\n newMsg.text = msg.text;\n newMsg.chat_id = metadata.ss_telegramChatID;\n return {\n     msg: newMsg,\n     metadata: metadata,\n     msgType: msgType\n };"
        }
      },
      {
        "additionalInfo": {
          "description": "",
          "layoutX": 622,
          "layoutY": 257
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "REST API Telegram Call",
        "debugMode": true,
        "configuration": {
          "restEndpointUrlPattern": "https://api.telegram.org/bot${ss_telegramBotToken}/sendMessage",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": false,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json"
          },
          "useRedisQueueForMsgPersistence": false,
          "trimQueue": false,
          "maxQueueSize": 0
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}